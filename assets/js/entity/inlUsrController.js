//
// Source code generated by Celerio, a Jaxio product.
// Documentation: http://www.jaxio.com/documentation/celerio/
// Follow us on twitter: @jaxiosoft
// Need commercial support ? Contact us: info@jaxio.com
// Template pack-custom:angularjs/assets/js/entity/EntityController.e.vm.js
//


app.controller("InlUsrController", ["$scope",  
"$log", "InlUsrRestService", "InlUsrRestSearchService", 
		"InlUsrRestIndexService", "InlUsrRestMassDeleteService", function(scope, log, 
		inlUsrRestService, inlUsrRestSearchService, inlUsrRestIndexService, 
		inlUsrRestMassDeleteService) {

log.info("receiving info from server side");

scope.settings = {
		singular: "Item",
		plural: "Items",
		cmd: "Add"
};

scope.configValue = {"usrNme": true, "usrPwd": true};

// pagination variables
scope.pagination = {};
scope.totalElementsPerPage = 20;
scope.busy = false;

// checkbox in the grid header
scope.selectAll = false;

// data to fill the grid
scope.data = [];

/** Refresh the result grid via a REST call, gets only the first page */
scope.refresh = function () {
	log.info("call method refresh inside InlUsrController");
	inlUsrRestService.query({page: 0, size: scope.totalElementsPerPage}, function(result) {
		log.info("receiving info from server side");
		
		log.info("result: " + result);
		scope.data = result.content;
		log.info("data post refresh:" + scope.data.length);
	});
	
	scope.selectAll = false;
};

/** Gets data page per page */
scope.refreshByPage = function (page, size, addMode) {
	log.info("call method refreshByPage inside InlUsrController");
	inlUsrRestService.query({page: page, size: size}, function(result) {
		log.info("receiving info from server side in page mode");
		
		log.info("result: " + result);
		if (addMode) {
			for (var i = 0; i < result.content.length; i++) {
				scope.data.push(result.content[i]);
			}
		} else {
			scope.data = result.content;
		}
		
		// fill pagination variables
		scope.pagination.first = result.first;
		scope.pagination.last = result.last;
		scope.pagination.totalElements = result.totalElements;
		scope.pagination.totalPages = result.totalPages;
		scope.pagination.number = result.number;
		
		log.info("data post refresh:" + scope.data.length);
		log.info("page number: " + scope.pagination.number);
		scope.busy = false;
	});
	
	scope.selectAll = false;
};

/** Gets first page */
scope.first = function () {
	log.info("call method first inside InlUsrController for page: 0");
	scope.refreshByPage(0, scope.totalElementsPerPage, false);		
}; 

/** Gets previous page */
scope.prev = function () {
	log.info("call method prev inside InlUsrController for page: " + (scope.pagination.number - 1));
	scope.refreshByPage(scope.pagination.number - 1, scope.totalElementsPerPage, false);		
}; 

/** Gets next page */
scope.next = function () {
	log.info("call method next inside InlUsrController for page: " + (scope.pagination.number + 1));
	scope.refreshByPage(scope.pagination.number + 1, scope.totalElementsPerPage, false);		
}; 

/** Gets last page */
scope.last = function () {
	log.info("call method last inside InlUsrController for page: " + (scope.pagination.totalPages - 1));
	scope.refreshByPage(scope.pagination.totalPages - 1, scope.totalElementsPerPage, false);		
};

			
/** Clear the result grid */
scope.clear = function () {
	log.info("call method clear inside InlUsrController");
	log.info(scope.data.length);
	scope.data = [];
};

/** Shows search aside */
scope.searchItem = function() {
	log.info("searchItem: ");
	var b = {
			icon: d.createIcon(!0),
			editing: !0
	};
	scope.item = b, scope.settings.cmd = "Search", scope.item.title='todo';
	
	//showForm(searchAside);
};

/** Executes the classical search on the server side */
scope.startSearch = function(item) {
	log.info("startSearch: " + item);
	log.info("startSearch usrNme: " + item.usrNme);

	// call search on the server side
	inlUsrRestService.dummy(item, function success(result){
		log.info("receiving info from server side");
		
		// refresh data and so the grid
		scope.data = result;
		log.info("data post refresh:" + result);
	});

	// refresh the grid
	
};

/** Executes the Elastic search on the server side */
scope.startElasticSearch = function(item) {
	// get criteria
	var query = scope.item.query;
	log.info("startElasticSearch: " + query);
	
	scope.data = [];
	
	// call search on the server side via REST
	inlUsrRestSearchService.query({query: query}, function success(result){
		log.info("receiving info from server side");
		
		// refresh data and so the grid
		scope.data = result;
		log.info("data post refresh:" + result);
	});
	
};

/** Loads only one item with its ID */
scope.loadOneItem = function(id) {
	inlUsrRestService.get({id: id}, function success(result) {
		scope.item = result;

		log.info("item loaded: " + result);
	});
};

/* fill the result grid by default (first page only) */
scope.refreshByPage(0, scope.totalElementsPerPage);


/** Permet de vider le tableau des éléments */
scope.clearAll = function() {
	scope.data = [];
};

scope.checkBoxValue = function() {
	log.info(scope.selectAll);
};

/** Selects all items */
scope.checkAll = function() {
	log.info("function checkAll called");
	angular.forEach(scope.data, function(scope) {
		scope.selected = !scope.selected
	});
	log.info(scope.selectAll);
	scope.selectAll = !scope.selectAll;
	log.info(scope.selectAll);
};


	
/** Creates or updates an item */
scope.saveItem = function() {
	log.info("Creating or updating an item");
	
	// defines the success behavior inside a methode
	var onSaveSuccess = function success(data) {
		console.log('success, got data: ', data);
	
		"New" == scope.settings.cmd, hideForm(crudAside);
	
		scope.refresh();
	
		};
	
		// defines the error behavior inside a methode
	var onSaveError = function (result) {
		};
	
	if (scope.item.id != null) {
		// update mode
		inlUsrRestService.update(scope.item, onSaveSuccess, onSaveError);
	} else {
		// creation mode
		inlUsrRestService.save(scope.item, onSaveSuccess, onSaveError);
	}
};

/** Removes one item or a list of items (selected ones) */
scope.remove = function(b) {
	console.log(scope.selectAll);
	var r = confirm("Are you sure ?");
	if (r == true) {/*
		(b ? scope.data.splice(scope.data.indexOf(b), 1) : (scope.data = scope.data.filter(function(a) {
		return !a.selected
		}), scope.selectAll = !1)); 
	 	*/
		if (!b) {
			// mass deletion mode
			var ids = "";
			// we browse all items in the table
			for	(index = 0; index < scope.data.length; index++) {
				if (scope.data[index].selected) {
					// we find a selected item
					console.log(index + ' ' + scope.data[index].title);
					
					if (ids.length == 0) {
						// we add the first item, so without the comma 
						ids = scope.data[index].id;
					} else {
						// another item, so with a separating comma
						ids = ids + "," + scope.data[index].id;
					}
				} 
			} 

			inlUsrRestMassDeleteService.massDelete({id: ids}, function success(data) {
				scope.refresh();
				
				
			}, function failure(err) {
				alert('request failed');
			});

		} else {
			// one item deletion mode
			inlUsrRestService.delete({id: b.id}, function success(data) {
				scope.refresh();
			}, function failure(err) {
				alert('request failed');
			});
		}	

	// uncheck the selectAll checkbox in the grid header
	scope.selectAll = false;
	}
};

/* Get data in csv format for download */
scope.getCSVData = function() {
	return scope.data;
};

/** Indexes all items on the server side */
scope.index = function() {
	inlUsrRestIndexService.index();
};


}]);

					
									
									
						
				/** main REST client for managing (4 CRUD calls) InlUsr entity */
app.factory('InlUsrRestService', function ($resource) {
	return $resource('api/inlUsrs/bypage/?page=:page&size=:size', {}, {
			/* sorting sample: &sort=aColumnName,desc&sort=anotherColumnName,asc */
		'query': { method: 'GET', isArray: false},
		'get': {
			method: 'GET',
			url: 'api/inlUsrs/:id',
			transformResponse: function (data) {
				data = angular.fromJson(data);
				return data;
			}
		},
		'create': { method:'POST', url: 'api/inlUsrs/:id'},
		'update': { method:'PUT', url: 'api/inlUsrs/:id'},
		'delete': { method:'DELETE', url: 'api/inlUsrs/:id' },
		'dummy': { method:'PUT', url: 'api/dummy/:id'}
	});
});

/** REST client for managing Elastic search calls on InlUsr entity */
app.factory('InlUsrRestSearchService', function ($resource) {
	return $resource('api/inlUsrs/search/:query', {}, {
		'query': { method: 'GET', isArray: true}
	});
});

/** REST client for indexing InlUsr entity */
app.factory('InlUsrRestIndexService', function ($resource) {
	return $resource('api/inlUsrs/indexAll', {}, {
		'index': { method: 'GET'}
	});
});

/** REST client for managing mass deletion calls on InlUsr entity */
app.factory('InlUsrRestMassDeleteService', function ($resource) {
	return $resource('api/inlUsrs/mass/:id', {}, {
		'massDelete': { method: 'DELETE'}
	});
});



/** REST client for managing inverse relation */
app.factory('InlUsrRestInvRelationService', function ($resource) {
	return $resource('api/void/:id', {}, {
		'void': { method: 'GET'}
	});
});
